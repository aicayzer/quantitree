{"version":3,"sources":["pages/Home.js","googleApiKey.js","App.js","serviceWorker.js","index.js"],"names":["StyledLocationSuggestions","styled","div","StyledLocationList","DisplayBox","Screen","StyledLocationInputField","TextField","StyledInputDiv","ResponseText","h2","HeadingText","h1","SmallerHeadingText","h3","Home","props","handleSubmit","e","setState","treeTime","state","startingLatitude","startingLongitude","destinationLatitude","destinationLongitude","preventDefault","url","fetch","then","response","json","contents","distance","rows","value","trees","Math","round","distnaceInMeters","catch","console","log","treeFailure","handleChangeStartingAddress","address","startingAddress","handleChangeDestinationAddress","destinationAddress","handleChangeMilesPergallon","mpg","milesPergallon","target","handleSelectStartingAddress","geocodeByAddress","results","getLatLng","latLng","lat","lng","error","handleSelectDestinationAddress","Grid","container","spacing","item","xs","onSubmit","this","onChange","onSelect","name","getInputProps","suggestions","getSuggestionItemProps","loading","id","label","variant","placeholder","className","map","suggestion","description","Button","type","color","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.220778b2.chunk.js","sourcesContent":["import React from \"react\";\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from \"react-places-autocomplete\";\nimport { googleApiKey } from \"../googleApiKey\";\n//Styles\nimport styled from \"styled-components\";\n//Material-UI\nimport TextField from \"@material-ui/core/TextField\";\n// import FormControl from \"@material-ui/core/FormControl\";\n// import MenuItem from \"@material-ui/core/MenuItem\";\n// import InputLabel from \"@material-ui/core/InputLabel\";\n// import Select from \"@material-ui/core/Select\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport \"typeface-roboto\";\n\nconst StyledLocationSuggestions = styled.div`\n  background-color: #fff;\n  padding: 12px 16px;\n  color: #3f51b5;\n  &:hover {\n    background-color: #3f51b5;\n    cursor: pointer;\n    color: #fff;\n  }\n`;\n\nconst StyledLocationList = styled.div`\n  min-width: 350px;\n  max-width: 350px;\n  width: 50%;\n  margin: 0 auto;\n`;\n\nconst DisplayBox = styled.div`\n  margin: 0;\n  position: absolute;\n  top: 40%;\n  left: 50%;\n  -ms-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n`;\n\nconst Screen = styled.div``;\n\nconst StyledLocationInputField = styled(TextField)`\n  width: 350px;\n  label.focused {\n    color: #3f51b5;\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border: 2px solid #3f51b5;\n    }\n    &:hover fieldset {\n      border-color: #3f51b5;\n    }\n    &.Mui-focused fieldset {\n      border-color: #3f51b5;\n      color: #3f51b5;\n    }\n  }\n`;\n\nconst StyledInputDiv = styled.div`\n  margin: 15px;\n`;\n\n// const StyledFormControl = styled(FormControl)`\n//   width: 250px;\n//   margin: 15px;\n// `;\n\nconst ResponseText = styled.h2`\n  font-family: Roboto;\n  font-weight: 400;\n  font-size: 1.3rem;\n  width: 50%;\n  margin: 0 auto;\n  color: #3f51b5;\n  margin-top: 15px;\n`;\n\nconst HeadingText = styled.h1`\n  font-family: Roboto;\n  font-weight: 600;\n  font-size: 2rem;\n  width: 95%;\n  max-width: 380px;\n  margin: 0 auto;\n  margin-bottom: 15px;\n  color: #3f51b5;\n`;\n\nconst SmallerHeadingText = styled.h3`\n  font-family: Roboto;\n  font-weight: 400;\n  font-size: 1rem;\n  width: 95%;\n  max-width: 380px;\n  margin: 0 auto;\n  color: #3f51b5;\n`;\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startingAddress: \"\",\n      startingLatitude: \"\",\n      startingLongitude: \"\",\n      destinationAddress: \"\",\n      destinationLatitude: \"\",\n      destinationLongitude: \"\",\n      // milesPergallon: \"\",\n      distnaceInMeters: null,\n      treeTime: \"\",\n      treeFailure: \" \",\n    };\n  }\n\n  //add errors\n  handleSubmit = (e) => {\n    this.setState({ treeTime: null });\n    const {\n      startingLatitude,\n      startingLongitude,\n      destinationLatitude,\n      destinationLongitude,\n    } = this.state;\n    e.preventDefault();\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = `https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=${startingLatitude},${startingLongitude}&destinations=${destinationLatitude},${destinationLongitude}&key=${googleApiKey}`;\n    fetch(proxyurl + url)\n      .then((response) => response.json())\n      .then((contents) => {\n        const distance = contents.rows[0][\"elements\"][0].distance.value;\n        //carbon emissions per mile 0.000098\n        //22kg offset of tree per year\n        const trees = Math.round(0.000098 * distance * 22);\n        //https://www.wired.co.uk/article/trains-planes-emissions-co2-comparison\n        this.setState({ distnaceInMeters: distance, treeTime: trees });\n      })\n      // console.log(this.state.responseContents);\n      // destination.rows[0][\"elements\"][0].distance.value\n      .catch(() => {\n        console.log(\"Canâ€™t access \" + url + \" response. Blocked by browser?\");\n        const responseFail =\n          \"I'm struggling to calculate that, try a different journey\";\n        this.setState({ treeFailure: responseFail });\n      });\n  };\n  handleChangeStartingAddress = (address) => {\n    this.setState({ startingAddress: address });\n  };\n  handleChangeDestinationAddress = (address) => {\n    this.setState({ destinationAddress: address });\n  };\n  handleChangeMilesPergallon = (mpg) => {\n    this.setState({ milesPergallon: [mpg.target.value] });\n  };\n\n  handleSelectStartingAddress = (address) => {\n    geocodeByAddress(address)\n      .then((results) => getLatLng(results[0]))\n      // .then((latLng) => console.log(\"Success\", latLng))\n      .then((latLng) =>\n        this.setState({\n          startingAddress: address,\n          startingLatitude: latLng.lat,\n          startingLongitude: latLng.lng,\n        }),\n      )\n\n      .catch((error) => console.error(\"Error\", error));\n  };\n\n  handleSelectDestinationAddress = (address) => {\n    geocodeByAddress(address)\n      .then((results) => getLatLng(results[0]))\n      .then((latLng) =>\n        this.setState({\n          destinationAddress: address,\n          destinationLatitude: latLng.lat,\n          destinationLongitude: latLng.lng,\n        }),\n      )\n      // .then((latLng) => {\n      //   if ([address.target.name] === \"startingAddress\") {\n      //     this.setState({\n      //       startingLatitude: latLng.lat,\n      //       startingLongitude: latLng.lng,\n      //     });\n      //   } else if ([address.target.name] === \"destinationAddress\") {\n      //     this.setState({\n      //       destinationLatitude: latLng.lat,\n      //       destinationLongitude: latLng.lng,\n      //     });\n      //   }\n      // })\n      .catch((error) => console.error(\"Error\", error));\n  };\n\n  render() {\n    return (\n      <Screen>\n        <Grid container spacing={2}>\n          <Grid item xs />\n          <Grid item xs>\n            <DisplayBox>\n              <HeadingText>Quantitree Calculator!</HeadingText>\n              <SmallerHeadingText>\n                Ever wondered how much carbon you burn when you drive somewhere?\n                Well we at Quantitree have and so we created this very basic\n                calculator to help you gain some perspective. Enter you starting\n                and ending location below and press submit to have a try!\n              </SmallerHeadingText>\n              <form onSubmit={this.handleSubmit}>\n                <PlacesAutocomplete\n                  value={this.state.startingAddress}\n                  onChange={this.handleChangeStartingAddress}\n                  onSelect={this.handleSelectStartingAddress}\n                  name=\"startingAddress\"\n                >\n                  {({\n                    getInputProps,\n                    suggestions,\n                    getSuggestionItemProps,\n                    loading,\n                  }) => (\n                    <StyledInputDiv>\n                      <StyledLocationInputField\n                        id=\"standard-basic\"\n                        label=\"Start\"\n                        variant=\"outlined\"\n                        {...getInputProps({\n                          placeholder: \"Search Places ...\",\n                          className: \"location-search-input\",\n                        })}\n                      />\n                      <StyledLocationList>\n                        {loading && (\n                          <StyledLocationSuggestions>\n                            Loading...\n                          </StyledLocationSuggestions>\n                        )}\n                        {suggestions.map((suggestion) => {\n                          return (\n                            <StyledLocationSuggestions\n                              {...getSuggestionItemProps(suggestion)}\n                            >\n                              {suggestion.description}\n                            </StyledLocationSuggestions>\n                          );\n                        })}\n                      </StyledLocationList>\n                    </StyledInputDiv>\n                  )}\n                </PlacesAutocomplete>\n                <PlacesAutocomplete\n                  value={this.state.destinationAddress}\n                  onChange={this.handleChangeDestinationAddress}\n                  onSelect={this.handleSelectDestinationAddress}\n                  name=\"destinationAddress\"\n                >\n                  {({\n                    getInputProps,\n                    suggestions,\n                    getSuggestionItemProps,\n                    loading,\n                  }) => (\n                    <StyledInputDiv>\n                      <StyledLocationInputField\n                        id=\"standard-basic\"\n                        label=\"Destination\"\n                        variant=\"outlined\"\n                        {...getInputProps({\n                          placeholder: \"Search Places ...\",\n                          className: \"location-search-input\",\n                        })}\n                      />\n                      <StyledLocationList>\n                        {loading && (\n                          <StyledLocationSuggestions>\n                            Loading...\n                          </StyledLocationSuggestions>\n                        )}\n                        {suggestions.map((suggestion) => {\n                          return (\n                            <StyledLocationSuggestions\n                              {...getSuggestionItemProps(suggestion)}\n                            >\n                              {suggestion.description}\n                            </StyledLocationSuggestions>\n                          );\n                        })}\n                      </StyledLocationList>\n                    </StyledInputDiv>\n                  )}\n                </PlacesAutocomplete>\n                {/* <StyledInputDiv>\n            <StyledFormControl variant=\"outlined\">\n              <InputLabel>Miles Per gallon UK</InputLabel>\n              <Select\n                value={this.state.milesPergallon}\n                onChange={this.handleChangeMilesPergallon}\n                label=\"Miles Per gallon\"\n              >\n                <MenuItem value={1}>1</MenuItem>\n                <MenuItem value={2}>2</MenuItem>\n                <MenuItem value={3}>3</MenuItem>\n                <MenuItem value={4}>4</MenuItem>\n                <MenuItem value={5}>5</MenuItem>\n                <MenuItem value={6}>6</MenuItem>\n                <MenuItem value={7}>7</MenuItem>\n                <MenuItem value={8}>8</MenuItem>\n                <MenuItem value={9}>9</MenuItem>\n                <MenuItem value={10}>10</MenuItem>\n                <MenuItem value={11}>11</MenuItem>\n                <MenuItem value={12}>12</MenuItem>\n                <MenuItem value={13}>13</MenuItem>\n                <MenuItem value={14}>14</MenuItem>\n                <MenuItem value={15}>15</MenuItem>\n                <MenuItem value={16}>16</MenuItem>\n                <MenuItem value={17}>17</MenuItem>\n                <MenuItem value={18}>18</MenuItem>\n                <MenuItem value={19}>19</MenuItem>\n                <MenuItem value={20}>20</MenuItem>\n              </Select>\n            </StyledFormControl>\n          </StyledInputDiv> */}\n                <Button variant=\"contained\" type=\"submit\" color=\"primary\">\n                  Submit\n                </Button>\n              </form>\n              <ResponseText>\n                {this.state.treeTime\n                  ? `that will take the average tree roughly ${this.state.treeTime} days to offset!`\n                  : `${this.state.treeFailure} `}\n              </ResponseText>\n            </DisplayBox>\n          </Grid>\n          <Grid item xs />\n        </Grid>\n      </Screen>\n    );\n  }\n}\n\nexport default Home;\n","export const googleApiKey = \"AIzaSyB9HeUXkPyrjpWLzy5c1RiWFdRHyPXGrro\";\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}